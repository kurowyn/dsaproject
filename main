CONST:
	DISP = 0
	LOC = 1	
	OPTION_LOCATION_VOITURE = 1
	OPTION_RETOURNER_VOITURE = 2
	OPTION_ETAT_VOITURE = 3
	OPTION_ETAT_PARC_VOITURE = 4
	OPTION_AFFICHER_STOCKER_VOITURE_DISP = 5
	OPTION_AFFICHER_STOCKER_VOITURE_LOC = 6
	MAX = 50
TYPE:
	Voiture = enreg:
		modele: chaine
		matricule, kilometrage, etat: entier
	fin enreg
	Client = enreg:
		nom, prenom: chaine
		cin, telephone, nombre_voitures: entier
		matricule_voitures: Tab de [1..MAX] entiers
	fin enreg
	VoitureNoeud = enreg:
		voiture: Voiture
		suiv: ^VoitureNoeud
	fin enreg
	TabV: Tab de [1..MAX] Voiture
	TabC: Tab de [1..MAX] Client

Fonction seek_personne(Tc: TabC, Nc, cin: entier): entier
Debut
	Tant que (Nc != 0) faire:
		Si (Tc[Nc].cin = cin) alors:
			seek_personne <- Nc
		fin si
		Nc <- Nc - 1
	fin tant que
	seek_personne <- -1
fin

Fonction seek_voiture(Tv: TabV, Nv, NUMERO: entier): entier
Debut
	Tant que (Nv != 0) faire:
		Si (Tv[Nv].matricule = NUMERO) alors:
			seek_voiture <- Nv
		fin si
		Nv <- Nv - 1
	fin tant que
	seek_voiture <- -1
fin

Fonction seek_voiture_client(Cl: Client, NUMERO: entier): entier  
Debut
	Tant que (Cl.nombre_voitures != 0) faire:
		Si (Cl.matricule_voitures[Cl.nombre_voitures] != NUMERO) alors:
			seek_voiture_client <- Cl.nombre_voitures
		fin si
		Cl.nombre_voitures <- Cl.nombre_voitures - 1
	fin tant que
	seek_voiture_client <- -1
fin

Procedure delete_voiture_client(VAR Cl: Client, pos):
Var:
	i: entier
Debut
	Pour i de pos a Cl.nombre_voitures - 1 faire:
		Cl.matricule_voitures[i] <- Cl.matricule_voitures[i + 1]
	fin pour
	Cl.nombre_voitures <- Cl.nombre_voitures - 1 
fin

Fonction lire_voiture(): Voiture
Var:
	v: Voiture
Debut
	ecrire('Modele: ')
	lire(v.modele)

	Repeter:
		ecrire('Kilometrage: ')
		lire(v.kilometrage)
	Jusqu'a: (v.kilometrage > 0)

	ecrire('Matricule: ')
	lire(v.matricule)

	Repeter:
		ecrire('Etat: ')
		lire(v.etat)
	Jusqu'a: (v.etat = LOC ou v.etat = DISP)

	lire_voiture <- v
fin

Fonction lire_client(): Client
Var:
	c: Client
Debut:
	ecrire("Nom: ")
	lire(c.nom)

	ecrire("Prenom: ")
	lire(c.prenom)

	Repeter:
		ecrire("CIN: ")
		lire(c.cin)
	Jusqu'a: (c.cin > 0)

	Repeter:
		ecrire("Telephone: ")
		lire(c.cin)
	Jusqu'a: (c.cin > 0)

	c.nombre_voitures <- 0

	lire_client <- c
fin

Procedure louer_voiture(Tv: TabV, VAR Tc: TabC, Nv, VAR Nc: entier):
Var:
	c: Client
	numero, pos_v, pos_c: entier
Debut:
	ecrire("Matricule de la voiture a louer: ")
	lire(numero)
	pos_v <- seek_voiture(Tv, Nv, numero)

	Si (pos = -1) alors:	
		ecrire("Voiture de matricule", numero, "n'existe pas")
	Sinon si (Tv[pos].etat = LOC) alors:
		ecrire("Voiture de matricule", Tv[pos].matricule, "deja louee.")
	Sinon:
		c <- lire_client()				 	
		pos_c <- seek_personne(Tc, Nc, c) 

		Si (pos_c = -1) alors:
			Si (Nc < 50) alors:
				Nc <- Nc + 1
				pos_c <- Nc
				Tc[pos_c] = c
			Sinon:
				ecrire("Nombre maximal des clients (50) atteint.")
			fin si
		fin si

		Si (pos_c != -1) alors:
			Si (Tc[pos_c].nombre_voitures < MAX) alors:
				Tc[pos_c].nombre_voitures <- Tc[pos_c].nombre_voitures + 1
				Tc[pos_c].matricule_voitures[nombre_voitures] <- numero
			Sinon:
				ecrire("Nombre maximale des voitures (50) atteint par le client",
						Tc[pos_c].cin)
			fin si
		fin si
	fin si
fin

Procedure retourner_voiture(VAR Tv: TabV, VAR Tc: TabC, Nv, Nc: entier)
Var 
	numero: entier
	pos_v: entier
	kilometrage: entier
	cin: entier
	pos_c: entier
Debut
	ecrire("Numero de voiture a retourner: ")
	lire(numero)
	pos_v <- seek_voiture(Tv, Nv, numero)
	Si (pos_v = -1) alors:
		ecrire("Voiture de matricule ", numero, "n'existe pas")
	Sinon si (Tv[pos_v].etat = LOC) alors:
		ecrire("Kilometrage a ajouter: ")
		Repeter:
			lire(kilometrage)
		Jusqu'a: (kilometrage > 0)
		Tv[pos_v].kilometrage <- Tv[pos_v].kilometrage + kilometrage
		Tv[pos_v].etat <- DISP

		ecrire("CIN du client qui a loue cette voiture: ")
		lire(cin)

		pos_c <- seek_personne(Tc, Nc, cin)

		Si (pos_c = -1) alors:
			ecrire("Aucune client avec un tel CIN.")
			ecrire("Le systeme va essayer de trouver le client qui a 
					loue la voiture.")

			Tant que (i < Nc et pos_c = -1) faire:
				pos_c <- seek_voiture_client(Tc[i], numero)
				i <- i + 1
			fin tant que

			Si (pos_c != -1) alors:
				delete_voiture_client(Tc[i - 1], pos_c)
			Sinon:
				ecrire("ERREUR: echec du trouver le client qui a loue la voiture",
						numero, "ce qui ne doit pas survenir. Contacter votre  
						adminstrateur.")
			fin si
		Sinon:
			delete_voiture_client(Tc[pos_c], 
								  seek_voiture_client(Tc[pos_c], numero))
		fin si
	fin si
fin	

Procedure afficher_voiture(v: Voiture)
Debut
	ecrire("Modele: ", v.modele, 
		   "Matricule: ", v.matricule,
		   "Kilometrage: ", v.kilometrage)
	Si (v.etat = LOC) alors:
		ecrire("Etat: louee")
	Sinon si (v.etat = DISP)
		ecrire("Etat: disponible")
	fin si
fin

Procedure etat_voiture(Tv: TabV, Nv: entier)
Var:
	pos_v, numero: entier
Debut:
	ecrire("Numero: ")	
	lire(numero)

	pos_v <- seek_voiture(Tv, Nv, numero)

	Si (pos_v = -1) alors:
		ecrire("Aucune voiture avec un tel numero existe.")
	Sinon:
		afficher_voiture(Tv[pos_v])
	fin si
fin
	
Procedure etat_parc_voiture(Tv: TabV, Nv: entier)
Var:
	kilometrage_moyenne: reel
Debut
	kilometrage_moyenne <- 0

	ecrire("Nombre total des voitures: ", Nv)

	ecrire("Matricules des voitures en location: ")
	Pour i de 1 a Nv faire:
		reel <- reel + (Tv[i].kilometrage)
		Si (Tv[i].etat = LOC) alors:
			ecrire(Tv[i].matricule)
		fin si
	fin pour
	reel <- reel / Nv

	ecrire("Matricules des voitures disponibles: ")
	Pour i de 1 a Nv faire:
		Si (Tv[i].etat = DISP) alors:
			ecrire(Tv[i].matricule)
		fin si
	fin pour

	ecrire("Kilometrage moyen des voitures: ", kilometrage_moyenne)
fin

Fonction stocker_afficher_voitures(Tv: TabV, Nv, type: entier): ^VoitureNoeud
Var:
	tete, suiv: ^VoitureNoeud
	i: entier
Debut
	creer(tete)
	suiv <- tete

	Pour i de 1 a Nv faire:
		// type: LOC ou DISP.
		Si (Tv[i].etat = type) alors:
			suiv^.voiture <- Tv[i]
			Si (i != Nv) alors:
				creer(suiv^.suiv)
				suiv <- suiv^.suiv
			fin si
		fin si
	fin pour

	suiv^.suiv <- nil

	stocker_afficher_voitures <- tete
fin

Procedure afficher_lc_voitures(tete: ^VoitureNoeud):
Debut
	Tantque (tete != nil) faire:
		afficher_voitre(tete^.voiture)
		tete = tete->suiv
	fin tantque
fin

Algorithme Parc
Var:
	Tv: TabV
	Nv: entier
	Tc: TabC
	Nc: entier
	v: Voiture
	choix: entier
	lc_disp, lc_loc: ^VoitureNoeud
Debut
	Nv <- 0	
	Nc <- 0
	Repeter:
		v <- lire_voiture()
		Si (v.matricule > 0) alors:
			Tv[Nv] = v	
			Nv <- Nv + 1
		fin si
	Jusqu'a: (v.matricule < 0 ou Nv > 50)

	Repeter:
		ecrire("--------MENU--------")
		ecrire("1: Location d'une voiture")
		ecrire("2: Retour d'une voiture")
		ecrire("3: Etat d'une voiture")
		ecrire("4: Etat d'un parc des voitures")
		ecrire("5: Stockage et affichage des voitures disponibles")
		ecrire("6: Stockage et affichage des voitures en location")
		ecrire("0: Fin du programme")

		lire(choix)

		Selon (choix):
			OPTION_LOCATION_VOITURE:
				louer_voiture(Tv, Tc, Nv, Nc)
			OPTION_RETOURNER_VOITURE:
				retourner_voiture(Tv, Tc, Nv, Nc)	
			OPTION_ETAT_VOITURE:
				etat_voiture(Tv, Nv)
			OPTION_ETAT_PARC_VOITURE:
				etat_parc_voiture(Tv, Nv)
			OPTION_STOCKER_AFFICHER_VOITURE_DISP:
				lc_disp <- stocker_afficher_voitures(Tv, Nv, DISP)	
				afficher_lc_voitures(lc_disp)
			OPTION_STOCKER_AFFICHER_VOITURE_LOC:
				lc_loc <- stocker_afficher_voitures(Tv, Nv, LOC)	
				afficher_lc_voitures(lc_loc)
		fin selon
	Jusqu'a: (choix = 0)
fin
